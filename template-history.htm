<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>History</title>
<link rel="icon" href="{{icon}}" />
<style type="text/css">
body {
  font: normal 14px Verdana, Arial, sans-serif;
}
td {
  padding-left: 15px;
  padding-right: 15px;
  text-align: right;
}
td.dates {
  padding-left: 15px;
  padding-right: 15px;
  text-align: left;
}
h2 {
  line-height: 18px;
  border-top: 2px solid lightgrey;
  border-bottom: 2px solid lightgrey;
  padding-top:5px;
  padding-bottom:5px;
  font: normal 16px Verdana, Arial, sans-serif;
}

</style>
<script>
function cookiedict() {
    const prefix = 'movielib-';
    let movies_to_dates = {};
    let cookies = document.cookie.split("; ");
    for (const pair of cookies) {
        let cookie = pair.split("=");
        let key = cookie[0].trim();
        if (key.startsWith(prefix))
            movies_to_dates[key.substring(prefix.length)] = cookie[1];
    }
    return movies_to_dates;
}

function setcookie(movie, dates) {
    document.cookie = `movielib-${movie}=${dates};samesite=lax;max-age=${Number.MAX_SAFE_INTEGER};path=/`;
}

function remcookie(movie) {
    document.cookie = `movielib-${movie}=;samesite=lax;max-age=0;path=/`;
}

function set_history_status(value) {
    document.cookie = `history_status=${value};samesite=lax;max-age=${Number.MAX_SAFE_INTEGER};path=/`;
}

function get_history_status() {
    for (const pair of document.cookie.split("; ")) {
        if (pair.startsWith('history_status'))
            return pair.split("=")[1];
    }
    return null;
}

function date_iso_to_loc(dateiso) {
    const options = {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
    };
    return new Date(dateiso).toLocaleDateString("fr-FR", options);
}

function onload() {
    show_history();

    if (get_history_status() === '1')
        document.getElementById("statusmsg").innerHTML = '';
    else
        document.getElementById("statusmsg").innerHTML = '&#9888 History not saved.';
}

function sort_by_movie() {
    localStorage.setItem('show_by', 'movie');
    show_history();
}

function sort_by_date() {
    localStorage.setItem('show_by', 'date');
    show_history();
}

function show_history() {
    if (localStorage.getItem('show_by') == 'movie')
        show_history_by_movie();
    else
        show_history_by_date();
}

function show_history_by_movie() {
    let s = '';
    let movies_to_dates = cookiedict();
    for (const movie of Object.keys(movies_to_dates).sort()) {
        let datesloc = movies_to_dates[movie].split(',').map(dateiso => date_iso_to_loc(dateiso));
        s += '<tr>' +
             '<td class="dates">' + movie + '</td>' +
             '<td class="dates">' + datesloc.join(',') + '</td>' +
             '</tr>';
    }
    document.getElementById("content").innerHTML = s;
}

function show_history_by_date() {
    let dates_to_movies = {};
    let movies_to_dates = cookiedict();
    for (const movie of Object.keys(movies_to_dates).sort()) {
        let dates = movies_to_dates[movie].split(',');
        for (const date of dates) {
            if (!(date in dates_to_movies))
                dates_to_movies[date] = [];
            dates_to_movies[date].push(movie);
        }
    }

    let s = '';
    for (const dateiso of Object.keys(dates_to_movies).sort()) {
        s += '<tr>' +
             '<td>' + date_iso_to_loc(dateiso) + '</td>' +
             '<td class="dates">' + dates_to_movies[dateiso][0] + '</td>' +
             '</tr>';
        for (const movie of dates_to_movies[dateiso].slice(1))
            s += '<tr>' +
                 '<td>' + '</td>' +
                 '<td class="dates">' + movie + '</td>' +
                 '</tr>';
    }
    document.getElementById("content").innerHTML = s;
}

function onClickRestore() {
    const [file] = document.querySelector("input[type=file]").files;
    const reader = new FileReader();
    reader.addEventListener("load", () => {restore_history(reader.result);}, false,);
    if (file) {
        reader.readAsText(file);
    }
}

function restore_history(s) {
    // remove all movie cookies
    let movies_to_dates = cookiedict();
    for (const movie in movies_to_dates)
        remcookie(movie);

    // get new movie cookies
    movies_to_dates = {};
    for (const line of s.split('\r\n')) {
        if (line.search(/\d\d\d\d-\d\d-\d\d/) < 0) {
            movie = line.trim();
        } else {
            movies_to_dates[movie] = line;
        }
    }

    // set new movie cookies
    for (const movie in movies_to_dates)
        setcookie(movie, movies_to_dates[movie]);

    location.reload();
    set_history_status(1);
}

function formatted_history_for_saving() {
    let dates_to_movies = {};
    let movies_to_dates = cookiedict();
    for (const movie of Object.keys(movies_to_dates).sort()) {
        let dates = movies_to_dates[movie].split(',');
        for (const date of dates) {
            if (!(date in dates_to_movies))
                dates_to_movies[date] = [];
            dates_to_movies[date].push(movie);
        }
    }
    let s = '';
    for (const dateiso of Object.keys(dates_to_movies).sort())
        for (const movie of dates_to_movies[dateiso])
            s += movie + '\n' + dateiso + '\n';
    return s;
}

async function save_history_with_copy_paste() {
    // not used
    s = formatted_history_for_saving();
    try {
        await navigator.clipboard.writeText(s);
        alert('Content copied to clipboard');
        location.reload();
        set_history_status(1);
    } catch (err) {
        alert('Failed to copy: ', err);
    }
}

function download(content, mimeType, filename){
    let a = document.createElement('a');
    let blob = new Blob([content], {type: mimeType});
    let url = URL.createObjectURL(blob);
    a.setAttribute('href', url);
    a.setAttribute('download', filename);
    a.click();
}

function save_history_with_anchor_download() {
    // no feedback on user action, assume user confirms download
    s = formatted_history_for_saving();
    set_history_status(1);
    location.reload();
    download(s, 'text/plain', 'history.txt');
}

function save_history() {
    save_history_with_anchor_download();
}
</script>
</head>

<body onload="onload();">
<div style="width: 95%; margin-left: auto; margin-right: auto">

<div style="width: 94%; height:0px; top: 0; position: fixed; ">
    {% include 'menu.htm' %}
</div>

<h2>
<input type="file" id="load_input" onchange="onClickRestore()" style="display:none;"/>
<input type="button"
       onclick="document.getElementById('load_input').click()"
       value="Restore history" />

<input type="button" onclick="save_history();" value="Save history" />
<input type="button" onclick="sort_by_movie();" value="Sort by movie" />
<input type="button" onclick="sort_by_date();" value="Sort by date" />
<span id='statusmsg' style="margin-left:5px"></span>
</h2>

<table id="content">
</table>
</div>
</body>
</html>
